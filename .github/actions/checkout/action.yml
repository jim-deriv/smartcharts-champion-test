# =============================================================================
# Smart Checkout Action
# =============================================================================
#
# Purpose: Provides intelligent repository checkout with fallback support
#
# Features:
#   - Primary/Fallback Logic: Attempts primary repository/ref, falls back if needed
#   - Existence Checking: Verifies refs exist before checkout
#   - Flexible Configuration: Supports various checkout scenarios
#   - Status Reporting: Outputs which repository/ref was actually used
#
# Use Cases:
#   - Feature branch development with fallback to main branch
#   - Multi-repository workflows with dependency management
#   - Conditional checkout based on ref availability
#   - Cross-repository compatibility testing
#
# Security:
#   - Uses provided GitHub token for authentication
#   - Validates inputs to prevent malicious usage
#   - Supports both public and private repositories
#
# =============================================================================

name: "Smart Checkout"
description: "Checkout with fallback to alternate repository/ref if primary ref does not exist"

inputs:
  fetch-depth:
    description: "Number of commits to fetch"
    default: "1"
    required: false
  path:
    description: "Relative path under $GITHUB_WORKSPACE to place the repository"
    required: false
  repository:
    description: "Repository name with owner"
    default: ${{ github.repository }}
    required: false
  ref:
    description: "The branch, tag or SHA to checkout"
    required: false
  alternate_repository:
    description: "Fallback repository name with owner"
    required: false
  alternate_ref:
    description: "Fallback branch, tag or SHA to checkout"
    required: false
  token:
    description: "Personal access token (PAT) used to fetch the repository"
    default: ${{ github.token }}
    required: false

outputs:
  ref_exists:
    description: "Whether the primary ref exists (true/false/default)"
    value: ${{ steps.repo.outputs.ref-exists }}
  repository_used:
    description: "The repository that was actually checked out"
    value: ${{ steps.set-output.outputs.repository }}
  ref_used:
    description: "The ref that was actually checked out"
    value: ${{ steps.set-output.outputs.ref }}

runs:
  using: composite
  steps:
    # -----------------------------------------------------------------------
    # Step 1: Input Validation
    # -----------------------------------------------------------------------
    # Purpose: Validates input combinations and formats to prevent invalid configurations
    # Logic: Ensures alternate_repository is provided when alternate_ref is specified
    # Safety: Prevents runtime errors from invalid input combinations
    # Format: Validates repository name format and other critical inputs
    # -----------------------------------------------------------------------
    - name: Validate inputs
      id: validate
      shell: bash
      run: |
        # Validate that alternate_repository is provided when alternate_ref is specified
        # This prevents scenarios where we have a fallback ref but no fallback repository
        if [[ -n "${{ inputs.ref }}" && -n "${{ inputs.alternate_ref }}" && -z "${{ inputs.alternate_repository }}" ]]; then
          echo "::error::alternate_repository is required when alternate_ref is specified"
          exit 1
        fi

        # Validate repository name format (owner/repo)
        if [[ -n "${{ inputs.repository }}" ]]; then
          if [[ ! "${{ inputs.repository }}" =~ ^[a-zA-Z0-9._-]+/[a-zA-Z0-9._-]+$ ]]; then
            echo "::error::Invalid repository format: ${{ inputs.repository }}. Expected format: owner/repo"
            exit 1
          fi
        fi

        # Validate alternate repository name format if provided
        if [[ -n "${{ inputs.alternate_repository }}" ]]; then
          if [[ ! "${{ inputs.alternate_repository }}" =~ ^[a-zA-Z0-9._-]+/[a-zA-Z0-9._-]+$ ]]; then
            echo "::error::Invalid alternate_repository format: ${{ inputs.alternate_repository }}. Expected format: owner/repo"
            exit 1
          fi
        fi

        # Validate fetch-depth is a positive integer
        if [[ -n "${{ inputs.fetch-depth }}" ]]; then
          if [[ ! "${{ inputs.fetch-depth }}" =~ ^[0-9]+$ ]]; then
            echo "::error::Invalid fetch-depth: ${{ inputs.fetch-depth }}. Must be a positive integer"
            exit 1
          fi
        fi

        echo "::notice::Input validation completed successfully"

    # -----------------------------------------------------------------------
    # Step 2: Reference Existence Check
    # -----------------------------------------------------------------------
    # Purpose: Determines if the primary ref exists in the primary repository
    # Method: Uses git ls-remote with authentication and timeout to check ref availability
    # Scope: Checks both branches and tags for comprehensive coverage
    # Output: Sets ref-exists flag (true/false/default) for conditional logic
    # Timeout: Implements timeout to prevent hanging on network issues
    # -----------------------------------------------------------------------
    - name: Check if ref exists
      id: repo
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}
        REPOSITORY: ${{ inputs.repository }}
        REF: ${{ inputs.ref }}
      run: |
        set -e

        # Handle case where no specific ref is requested (use default branch)
        if [[ -z "$REF" ]]; then
          echo "::notice::No ref specified, using default branch"
          echo "ref-exists=default" >> $GITHUB_OUTPUT
          exit 0
        fi

        echo "::notice::Checking if ref '$REF' exists in repository '$REPOSITORY'"

        # Check if the specified ref exists in the primary repository
        # Uses authenticated git ls-remote with timeout to check both heads and tags
        if timeout 30 git ls-remote --exit-code https://$GH_TOKEN@github.com/$REPOSITORY.git "$REF" >/dev/null 2>&1; then
          echo "::notice::✅ Found ref '$REF' in $REPOSITORY"
          echo "ref-exists=true" >> $GITHUB_OUTPUT
        else
          EXIT_CODE=$?
          if [[ $EXIT_CODE -eq 124 ]]; then
            echo "::error::Timeout while checking ref '$REF' in $REPOSITORY. Please check network connectivity and repository access."
            exit 1
          fi

          echo "::warning::❌ Ref '$REF' not found in $REPOSITORY"
          if [[ -n "${{ inputs.alternate_repository }}" ]]; then
            echo "::notice::🔄 Will fallback to ${{ inputs.alternate_repository }}"
            echo "ref-exists=false" >> $GITHUB_OUTPUT
          else
            echo "::error::No alternate repository specified for fallback"
            echo "::error::💡 Troubleshooting tips:"
            echo "::error::  - Verify the ref name is correct: '$REF'"
            echo "::error::  - Check if the repository exists: '$REPOSITORY'"
            echo "::error::  - Ensure the token has access to the repository"
            echo "::error::  - Consider providing an alternate_repository for fallback"
            exit 1
          fi
        fi

    # -----------------------------------------------------------------------
    # Step 3: Primary Repository Checkout
    # -----------------------------------------------------------------------
    # Purpose: Checks out the primary repository when ref exists or is default
    # Conditions: Runs when ref exists (true) or no ref specified (default)
    # Configuration: Uses all provided inputs for maximum flexibility
    # -----------------------------------------------------------------------
    - name: Checkout primary repository
      if: steps.repo.outputs.ref-exists == 'true' || steps.repo.outputs.ref-exists == 'default'
      uses: actions/checkout@v4
      with:
        fetch-depth: ${{ inputs.fetch-depth }}
        path: ${{ inputs.path }}
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.ref }}
        token: ${{ inputs.token }}

    # -----------------------------------------------------------------------
    # Step 4: Alternate Repository Checkout
    # -----------------------------------------------------------------------
    # Purpose: Checks out the alternate repository when primary ref doesn't exist
    # Conditions: Only runs when primary ref check failed (ref-exists == false)
    # Fallback Logic: Uses alternate_ref if provided, otherwise uses primary ref
    # -----------------------------------------------------------------------
    - name: Checkout alternate repository
      if: steps.repo.outputs.ref-exists == 'false'
      uses: actions/checkout@v4
      with:
        fetch-depth: ${{ inputs.fetch-depth }}
        path: ${{ inputs.path }}
        repository: ${{ inputs.alternate_repository }}
        ref: ${{ inputs.alternate_ref || inputs.ref }}
        token: ${{ inputs.token }}

    # -----------------------------------------------------------------------
    # Step 5: Output Generation
    # -----------------------------------------------------------------------
    # Purpose: Sets action outputs to inform caller which repository/ref was used
    # Logic: Provides different outputs based on which checkout path was taken
    # Transparency: Allows workflows to know exactly what was checked out
    # Summary: Provides comprehensive checkout summary for debugging
    # -----------------------------------------------------------------------
    - name: Set final outputs
      id: set-output
      shell: bash
      env:
        REF_EXISTS: ${{ steps.repo.outputs.ref-exists }}
        PRIMARY_REPO: ${{ inputs.repository }}
        PRIMARY_REF: ${{ inputs.ref }}
        ALTERNATE_REPO: ${{ inputs.alternate_repository }}
        ALTERNATE_REF: ${{ inputs.alternate_ref }}
      run: |
        # Set outputs based on which repository was actually checked out
        if [[ "$REF_EXISTS" == "false" ]]; then
          # Alternate repository was used
          FINAL_REPO="${ALTERNATE_REPO}"
          FINAL_REF="${ALTERNATE_REF:-$PRIMARY_REF}"
          echo "repository=${FINAL_REPO}" >> $GITHUB_OUTPUT
          echo "ref=${FINAL_REF}" >> $GITHUB_OUTPUT
          echo "::notice::✅ Successfully checked out ${FINAL_REPO} at ref ${FINAL_REF}"
          echo "::notice::📋 Checkout Summary:"
          echo "::notice::  - Primary repository: ${PRIMARY_REPO} (ref not found)"
          echo "::notice::  - Fallback used: ${FINAL_REPO}"
          echo "::notice::  - Final ref: ${FINAL_REF}"
        else
          # Primary repository was used (either with specific ref or default)
          FINAL_REPO="${PRIMARY_REPO}"
          FINAL_REF="${PRIMARY_REF:-default}"
          echo "repository=${FINAL_REPO}" >> $GITHUB_OUTPUT
          echo "ref=${FINAL_REF}" >> $GITHUB_OUTPUT
          echo "::notice::✅ Successfully checked out ${FINAL_REPO} at ref ${FINAL_REF}"
          echo "::notice::📋 Checkout Summary:"
          echo "::notice::  - Repository: ${FINAL_REPO}"
          echo "::notice::  - Ref: ${FINAL_REF}"
          echo "::notice::  - Fallback: Not needed"
        fi
