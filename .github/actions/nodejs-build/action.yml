# =============================================================================
# Node.js Build Action
# =============================================================================
#
# Purpose: Builds SmartCharts Champion application with caching and retry logic
# Performance: Uses npm caching and build artifact caching
# Output: Stores Node.js build artifacts for integration step
#
# =============================================================================

name: "Node.js Build"
description: "Builds SmartCharts Champion application with caching and retry mechanisms"

inputs:
  node_version:
    description: "Node.js version to use"
    default: "18.17.0"
    required: false
  node_env:
    description: "Node environment"
    default: "production"
    required: false
  merge_commit_sha:
    description: "Merge commit SHA to checkout"
    required: true

outputs:
  build_size:
    description: "Size of the Node.js build"
    value: ${{ steps.build_stats.outputs.build_size }}
  artifact_name:
    description: "Name of the uploaded artifact"
    value: "nodejs-build"

runs:
  using: composite
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.merge_commit_sha }}
        fetch-depth: 1

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node_version }}

    - name: Debug current directory
      shell: bash
      run: |
        echo "::group::Debug Information"
        echo "Current working directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "Package files:"
        ls -la package* || echo "No package files found"
        echo "::endgroup::"

    - name: Cache node_modules
      uses: actions/cache@v3
      with:
        path: node_modules
        key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          node-modules-${{ runner.os }}-
          node-modules-

    - name: Install dependencies with manual retry
      shell: bash
      run: |
        set -e
        
        # Manual retry logic for npm install
        MAX_ATTEMPTS=3
        ATTEMPT=1
        
        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          echo "::notice::Install attempt $ATTEMPT of $MAX_ATTEMPTS"
          
          if [ $ATTEMPT -gt 1 ]; then
            echo "::notice::Waiting 30 seconds before retry..."
            sleep 30
            # Clean npm cache and node_modules on retry
            npm cache clean --force || true
            rm -rf node_modules || true
          fi
          
          echo "::group::Installing dependencies (Attempt $ATTEMPT)"
          
          echo "::group::NPM and Node.js version information"
          node --version
          npm --version
          echo "::endgroup::"
          
          echo "::group::Package-lock.json information"
          if [ -f "package-lock.json" ]; then
            echo "package-lock.json exists"
            head -10 package-lock.json
          else
            echo "package-lock.json not found"
            exit 1
          fi
          echo "::endgroup::"
          
          echo "::group::Running npm ci"
          # Try npm ci first, fallback to npm install if it fails
          if npm ci --verbose --no-audit --no-fund; then
            echo "::notice::✅ Dependencies installed successfully with npm ci on attempt $ATTEMPT"
            echo "::endgroup::"
            break
          elif npm install --verbose --no-audit --no-fund; then
            echo "::notice::✅ Dependencies installed successfully with npm install on attempt $ATTEMPT"
            echo "::endgroup::"
            break
          else
            echo "::endgroup::"
            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "::error::❌ Failed to install dependencies after $MAX_ATTEMPTS attempts"
              exit 1
            else
              echo "::warning::⚠️ Install attempt $ATTEMPT failed, will retry..."
              ATTEMPT=$((ATTEMPT + 1))
            fi
          fi
        done

    - name: Build SmartCharts Champion with manual retry
      shell: bash
      env:
        NODE_ENV: ${{ inputs.node_env }}
        PATH: ${{ github.workspace }}/node_modules/.bin:${{ env.PATH }}
      run: |
        set -e
        
        # Manual retry logic
        MAX_ATTEMPTS=3
        ATTEMPT=1
        
        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          echo "::notice::Build attempt $ATTEMPT of $MAX_ATTEMPTS"
          
          if [ $ATTEMPT -gt 1 ]; then
            echo "::notice::Waiting 30 seconds before retry..."
            sleep 30
          fi
          
          echo "::group::Building SmartCharts Champion (Attempt $ATTEMPT)"
          
          # Detailed environment debugging (only on first attempt)
          if [ $ATTEMPT -eq 1 ]; then
            echo "=== Environment Debug ==="
            echo "Current directory: $(pwd)"
            echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
            echo "PATH: $PATH"
            echo "NODE_ENV: $NODE_ENV"
            
            echo "=== Directory Contents ==="
            echo "Current directory contents:"
            ls -la
            
            echo "=== Node Modules Check ==="
            if [ -d "node_modules" ]; then
              echo "node_modules directory exists"
              echo "node_modules/.bin contents:"
              ls -la node_modules/.bin/ | head -20
              echo "Looking for rimraf specifically:"
              find node_modules -name "rimraf*" -type f 2>/dev/null || echo "No rimraf files found"
            else
              echo "ERROR: node_modules directory does not exist!"
              exit 1
            fi
            
            echo "=== Package.json Check ==="
            if [ -f "package.json" ]; then
              echo "package.json exists"
              echo "Build script from package.json:"
              grep -A1 -B1 '"build"' package.json || echo "No build script found"
            else
              echo "ERROR: package.json not found!"
              exit 1
            fi
          fi
          
          # Try different approaches to run the build
          echo "=== Build Attempt ==="
          echo "Cleaning dist directory..."
          rm -rf dist
          
          echo "Attempting build with different methods..."
          
          # Method 1: Try npm run build (ignore husky errors)
          echo "Method 1: npm run build"
          if npm run build --ignore-scripts; then
            echo "npm run build with --ignore-scripts succeeded"
            BUILD_SUCCESS=true
          elif npm run build; then
            echo "npm run build succeeded"
            BUILD_SUCCESS=true
          else
            echo "npm run build failed"
            BUILD_SUCCESS=false
          fi
          
          echo "::endgroup::"

          # Check if build succeeded
          if [ "$BUILD_SUCCESS" = true ] && [ -d "dist" ]; then
            echo "::notice::✅ Build completed successfully on attempt $ATTEMPT"
            break
          elif [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "::error::❌ Build failed after $MAX_ATTEMPTS attempts"
            echo "::error::SmartCharts Champion build failed - no dist directory found"
            exit 1
          else
            echo "::warning::⚠️ Build attempt $ATTEMPT failed, will retry..."
            ATTEMPT=$((ATTEMPT + 1))
          fi
        done

    - name: Report Node.js build size
      id: build_stats
      shell: bash
      run: |
        NODEJS_SIZE=$(du -sh dist | cut -f1)
        echo "::notice::Node.js build size: $NODEJS_SIZE"
        echo "build_size=$NODEJS_SIZE" >> $GITHUB_OUTPUT

    - name: Upload Node.js build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nodejs-build
        path: dist
        retention-days: 1
