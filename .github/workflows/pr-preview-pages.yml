# =============================================================================
# PR Preview Pages Workflow
# =============================================================================
#
# Purpose: Builds and deploys preview sites for pull requests to GitHub Pages
#
# Triggers:
#   - pull_request events (opened, synchronize)
#   - Only processes PRs from the same repository (security measure)
#
# Process Flow:
#   1. Security Check - Validates PR source and inputs using reusable action
#   2. Parallel Build - Simultaneously builds Flutter and Node.js components
#   3. Integration - Combines build outputs into unified deployment package
#   4. Deployment - Deploys to GitHub Pages with verification
#   5. Notification - Posts preview link and build statistics
#
# Security Features:
#   - Enhanced fork protection with input validation
#   - Secure merge commit checkout
#   - Permission scoping with minimal required permissions
#   - SSH key management with automatic cleanup
#   - Build verification and deployment validation
#
# Performance Features:
#   - Parallel job execution for Flutter and Node.js builds
#   - Multi-layer caching (npm, Flutter, build artifacts)
#   - Build retry mechanisms for reliability
#   - Resource cleanup for optimal runner performance
#
# Deployment URLs:
#   - Preview: https://{owner}.github.io/smartcharts-champion/pr-{number}
#   - Main: https://{owner}.github.io/smartcharts-champion
#
# Dependencies:
#   - Node.js 18.x with npm caching
#   - Flutter 3.24.1 with stable channel
#   - SSH key configured in repository secrets
#   - GitHub token with appropriate permissions
#
# =============================================================================

name: Publish to GitHub Pages

on:
    pull_request:
        types: [opened, synchronize]

# Prevent parallel builds for the same PR to avoid conflicts
concurrency:
    group: github-pages-build-${{ github.head_ref || github.ref_name }}
    cancel-in-progress: true

# Global environment variables
env:
    # Version configuration
    FLUTTER_VERSION: '3.24.1'
    NODE_VERSION: '18.x'
    FLUTTER_CHART_REF: 'master'

    # Build configuration
    FLUTTER_WEB_RENDERER: 'html'
    NODE_ENV: 'production'

    # Deployment configuration
    DEPLOYMENT_VERIFICATION_ATTEMPTS: 10
    DEPLOYMENT_WAIT_TIME: 60

jobs:
    # ---------------------------------------------------------------------------
    # Security and Validation Job
    # ---------------------------------------------------------------------------
    # Purpose: Validates PR source, inputs, and sets up deployment parameters
    # Security: Prevents malicious code execution and validates all inputs
    # Output: Provides safety flags and deployment configuration for other jobs
    # ---------------------------------------------------------------------------
    security_and_setup:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            pull-requests: write
            checks: write
        outputs:
            is_safe: ${{ steps.security_validation.outputs.is_safe }}
            branch_name: ${{ steps.security_validation.outputs.branch_name }}
            deploy_url: ${{ steps.security_validation.outputs.deploy_url }}
            is_preview: ${{ steps.security_validation.outputs.is_preview }}
            build_base_path: ${{ steps.security_validation.outputs.build_base_path }}
        steps:
            - name: Checkout for action access
              uses: actions/checkout@v4
              with:
                  sparse-checkout: |
                      .github/actions/security-validation
                      .github/actions/preview-notifications
                  sparse-checkout-cone-mode: false

            - name: Security validation and setup
              id: security_validation
              uses: ./.github/actions/security-validation
              with:
                  pr_number: ${{ github.event.number }}
                  event_name: ${{ github.event_name }}
                  head_repo_full_name: ${{ github.event.pull_request.head.repo.full_name }}
                  base_repo_full_name: ${{ github.repository }}
                  repository_owner: ${{ github.repository_owner }}

            - name: Post initial build status
              if: github.event_name == 'pull_request' && steps.security_validation.outputs.is_safe == 'true'
              uses: ./.github/actions/preview-notifications
              with:
                  github_token: ${{ github.token }}
                  pr_number: ${{ github.event.number }}
                  pr_title: ${{ github.event.pull_request.title }}
                  head_sha: ${{ github.event.pull_request.head.sha }}
                  deploy_url: ${{ steps.security_validation.outputs.deploy_url }}
                  deployment_verified: 'false'
                  workflow_status: 'started'
                  workflow_run_id: ${{ github.run_id }}
                  repository_url: ${{ github.event.repository.html_url }}

    # ---------------------------------------------------------------------------
    # Flutter Build Job
    # ---------------------------------------------------------------------------
    # Purpose: Builds Flutter web application in parallel with Node.js build
    # Performance: Uses extensive caching for dependencies and build artifacts
    # Output: Stores Flutter build artifacts for integration step
    # ---------------------------------------------------------------------------
    build_flutter:
        needs: security_and_setup
        if: needs.security_and_setup.outputs.is_safe == 'true'
        runs-on: ubuntu-latest
        outputs:
            build_size: ${{ steps.flutter_build.outputs.build_size }}
        steps:
            - name: Checkout for action access
              uses: actions/checkout@v4
              with:
                  sparse-checkout: |
                      .github/actions/flutter-build
                  sparse-checkout-cone-mode: false

            - name: Build Flutter application
              id: flutter_build
              uses: ./.github/actions/flutter-build
              with:
                  flutter_version: ${{ env.FLUTTER_VERSION }}
                  flutter_chart_ref: ${{ env.FLUTTER_CHART_REF }}
                  web_renderer: ${{ env.FLUTTER_WEB_RENDERER }}
                  ssh_key: ${{ secrets.SSH_KEY }}
                  github_token: ${{ github.token }}
                  merge_commit_sha: ${{ github.event.pull_request.merge_commit_sha }}

    # ---------------------------------------------------------------------------
    # Node.js Build Job
    # ---------------------------------------------------------------------------
    # Purpose: Builds SmartCharts Champion application in parallel with Flutter
    # Performance: Uses npm caching and build artifact caching
    # Output: Stores Node.js build artifacts for integration step
    # ---------------------------------------------------------------------------
    build_nodejs:
        needs: security_and_setup
        if: needs.security_and_setup.outputs.is_safe == 'true'
        runs-on: ubuntu-latest
        outputs:
            build_size: ${{ steps.nodejs_build.outputs.build_size }}
        steps:
            - name: Checkout for action access
              uses: actions/checkout@v4
              with:
                  sparse-checkout: |
                      .github/actions/nodejs-build
                  sparse-checkout-cone-mode: false

            - name: Build Node.js application
              id: nodejs_build
              uses: ./.github/actions/nodejs-build
              with:
                  node_version: ${{ env.NODE_VERSION }}
                  node_env: ${{ env.NODE_ENV }}
                  merge_commit_sha: ${{ github.event.pull_request.merge_commit_sha }}

    # ---------------------------------------------------------------------------
    # Integration and Deployment Job
    # ---------------------------------------------------------------------------
    # Purpose: Combines builds and deploys to GitHub Pages with verification
    # Dependencies: Requires both Flutter and Node.js builds to complete
    # Features: Deployment verification, failure reporting, and cleanup
    # ---------------------------------------------------------------------------
    deploy:
        needs: [security_and_setup, build_flutter, build_nodejs]
        if: needs.security_and_setup.outputs.is_safe == 'true'
        runs-on: ubuntu-latest
        permissions:
            contents: write
            checks: write
            pull-requests: write
            pages: write
        outputs:
            deployment_verified: ${{ steps.deploy_preview.outputs.deployment_verified }}
            total_size: ${{ steps.deploy_preview.outputs.total_size }}
        steps:
            - name: Checkout for action access
              uses: actions/checkout@v4
              with:
                  sparse-checkout: |
                      .github/actions/deploy-preview
                  sparse-checkout-cone-mode: false

            - name: Deploy preview
              id: deploy_preview
              uses: ./.github/actions/deploy-preview
              with:
                  node_version: ${{ env.NODE_VERSION }}
                  merge_commit_sha: ${{ github.event.pull_request.merge_commit_sha }}
                  branch_name: ${{ needs.security_and_setup.outputs.branch_name }}
                  deploy_url: ${{ needs.security_and_setup.outputs.deploy_url }}
                  is_preview: ${{ needs.security_and_setup.outputs.is_preview }}
                  github_token: ${{ github.token }}
                  deployment_verification_attempts: ${{ env.DEPLOYMENT_VERIFICATION_ATTEMPTS }}
                  deployment_wait_time: ${{ env.DEPLOYMENT_WAIT_TIME }}

    # ---------------------------------------------------------------------------
    # Notification Job
    # ---------------------------------------------------------------------------
    # Purpose: Posts success/failure notifications with build statistics
    # Dependencies: Runs after deployment regardless of success/failure
    # Features: Comprehensive status reporting and troubleshooting information
    # ---------------------------------------------------------------------------
    notify:
        needs: [security_and_setup, build_flutter, build_nodejs, deploy]
        if: always() && needs.security_and_setup.outputs.is_safe == 'true'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout for action access
              uses: actions/checkout@v4
              with:
                  sparse-checkout: |
                      .github/actions/preview-notifications
                  sparse-checkout-cone-mode: false

            - name: Send notifications
              uses: ./.github/actions/preview-notifications
              with:
                  github_token: ${{ github.token }}
                  pr_number: ${{ github.event.number }}
                  pr_title: ${{ github.event.pull_request.title }}
                  head_sha: ${{ github.event.pull_request.head.sha }}
                  deploy_url: ${{ needs.security_and_setup.outputs.deploy_url }}
                  deployment_verified: ${{ needs.deploy.outputs.deployment_verified || 'false' }}
                  total_size: ${{ needs.deploy.outputs.total_size }}
                  flutter_build_size: ${{ needs.build_flutter.outputs.build_size }}
                  nodejs_build_size: ${{ needs.build_nodejs.outputs.build_size }}
                  workflow_status: ${{ needs.deploy.result == 'success' && 'success' || 'failure' }}
                  workflow_run_id: ${{ github.run_id }}
                  repository_url: ${{ github.event.repository.html_url }}

    # ---------------------------------------------------------------------------
    # Cleanup Job
    # ---------------------------------------------------------------------------
    # Purpose: Cleanup artifacts and perform maintenance tasks
    # Timing: Always runs regardless of workflow success/failure
    # Scope: Removes temporary artifacts and performs housekeeping
    # ---------------------------------------------------------------------------
    cleanup:
        needs: [security_and_setup, build_flutter, build_nodejs, deploy, notify]
        if: always() && needs.security_and_setup.outputs.is_safe == 'true'
        runs-on: ubuntu-latest
        steps:
            - name: Cleanup artifacts
              uses: actions/github-script@v7
              continue-on-error: true
              with:
                  github-token: ${{ github.token }}
                  script: |
                      // Clean up build artifacts older than 1 day
                      const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        run_id: context.runId,
                      });

                      console.log(`Found ${artifacts.data.artifacts.length} artifacts for cleanup`);

                      for (const artifact of artifacts.data.artifacts) {
                        try {
                          await github.rest.actions.deleteArtifact({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            artifact_id: artifact.id,
                          });
                          console.log(`Cleaned up artifact: ${artifact.name}`);
                        } catch (error) {
                          console.log(`Failed to cleanup artifact ${artifact.name}: ${error.message}`);
                        }
                      }

            - name: Workflow summary
              run: |
                  echo "## 🎯 Workflow Summary" >> $GITHUB_STEP_SUMMARY
                  echo "- **Security Check:** ✅ Passed" >> $GITHUB_STEP_SUMMARY
                  echo "- **Flutter Build:** ${{ needs.build_flutter.result == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Node.js Build:** ${{ needs.build_nodejs.result == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Deployment:** ${{ needs.deploy.result == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Preview URL:** ${{ needs.security_and_setup.outputs.deploy_url }}" >> $GITHUB_STEP_SUMMARY
