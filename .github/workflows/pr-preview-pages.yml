# =============================================================================
# PR Preview Pages Workflow - Enhanced Version
# =============================================================================
#
# Purpose: Builds and deploys preview sites for pull requests to GitHub Pages
#
# Triggers:
#   - pull_request events (opened, synchronize)
#   - Only processes PRs from the same repository (security measure)
#
# Process Flow:
#   1. Security Check - Validates PR source and inputs
#   2. Parallel Build - Simultaneously builds Flutter and Node.js components
#   3. Integration - Combines build outputs into unified deployment package
#   4. Deployment - Deploys to GitHub Pages with verification
#   5. Notification - Posts preview link and build statistics
#
# Security Features:
#   - Enhanced fork protection with input validation
#   - Secure merge commit checkout
#   - Permission scoping with minimal required permissions
#   - SSH key management with automatic cleanup
#   - Build verification and deployment validation
#
# Performance Features:
#   - Parallel job execution for Flutter and Node.js builds
#   - Multi-layer caching (npm, Flutter, build artifacts)
#   - Build retry mechanisms for reliability
#   - Resource cleanup for optimal runner performance
#
# Deployment URLs:
#   - Preview: https://{owner}.github.io/smartcharts-champion/pr-{number}
#   - Main: https://{owner}.github.io/smartcharts-champion
#
# Dependencies:
#   - Node.js 18.x with npm caching
#   - Flutter 3.24.1 with stable channel
#   - SSH key configured in repository secrets
#   - GitHub token with appropriate permissions
#
# =============================================================================

name: Publish to GitHub Pages

on:
  pull_request:
    types: [opened, synchronize]

# Prevent parallel builds for the same PR to avoid conflicts
concurrency:
  group: github-pages-build-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

# Global environment variables
env:
  # Version configuration
  FLUTTER_VERSION: '3.24.1'
  NODE_VERSION: '18.x'
  FLUTTER_CHART_REF: 'master'

  # Build configuration
  FLUTTER_WEB_RENDERER: 'html'
  NODE_ENV: 'production'

  # Deployment configuration
  DEPLOYMENT_VERIFICATION_ATTEMPTS: 10
  DEPLOYMENT_WAIT_TIME: 60

jobs:
  # ---------------------------------------------------------------------------
  # Security and Validation Job
  # ---------------------------------------------------------------------------
  # Purpose: Validates PR source, inputs, and sets up deployment parameters
  # Security: Prevents malicious code execution and validates all inputs
  # Output: Provides safety flags and deployment configuration for other jobs
  # ---------------------------------------------------------------------------
  security_and_setup:
    runs-on: ubuntu-latest
    outputs:
      is_safe: ${{ steps.security_check.outputs.is_safe }}
      branch_name: ${{ steps.deploy_params.outputs.branch_name }}
      deploy_url: ${{ steps.deploy_params.outputs.deploy_url }}
      is_preview: ${{ steps.deploy_params.outputs.is_preview }}
      build_base_path: ${{ steps.deploy_params.outputs.build_base_path }}
    steps:
      - name: Security and input validation
        id: security_check
        run: |
          # Validate PR number is numeric
          if ! [[ "${{ github.event.number }}" =~ ^[0-9]+$ ]]; then
            echo "::error::Invalid PR number format"
            echo "is_safe=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Compare the source repository with the target repository
          if [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
            echo "::warning::PR is from a fork. Manual approval required for security."
            echo "is_safe=false" >> $GITHUB_OUTPUT
          else
            echo "::notice::PR is from the same repository. Safe to proceed."
            echo "is_safe=true" >> $GITHUB_OUTPUT
          fi

      - name: Set deployment parameters
        id: deploy_params
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # PR preview deployment configuration
            BRANCH_NAME="pr-${{ github.event.number }}"
            DEPLOY_URL="https://${{ github.repository_owner }}.github.io/smartcharts-champion/${BRANCH_NAME}"
            BUILD_BASE_PATH="/smartcharts-champion/${BRANCH_NAME}"
            echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
            echo "deploy_url=${DEPLOY_URL}" >> $GITHUB_OUTPUT
            echo "build_base_path=${BUILD_BASE_PATH}" >> $GITHUB_OUTPUT
            echo "is_preview=true" >> $GITHUB_OUTPUT
          else
            # Main branch deployment configuration
            echo "branch_name=${{ env.GITHUB_PAGES_BRANCH }}" >> $GITHUB_OUTPUT
            echo "deploy_url=https://${{ github.repository_owner }}.github.io/smartcharts-champion" >> $GITHUB_OUTPUT
            echo "build_base_path=/smartcharts-champion" >> $GITHUB_OUTPUT
            echo "is_preview=false" >> $GITHUB_OUTPUT
          fi

      - name: Post initial build status
        if: github.event_name == 'pull_request'
        id: post_preview_build_comment
        uses: 'deriv-com/shared-actions/.github/actions/post_preview_build_comment@v1'
        with:
          issue_number: ${{ github.event.number }}
          head_sha: ${{ github.event.pull_request.head.sha }}

  # ---------------------------------------------------------------------------
  # Flutter Build Job
  # ---------------------------------------------------------------------------
  # Purpose: Builds Flutter web application in parallel with Node.js build
  # Performance: Uses extensive caching for dependencies and build artifacts
  # Output: Stores Flutter build artifacts for integration step
  # ---------------------------------------------------------------------------
  build_flutter:
    needs: security_and_setup
    if: needs.security_and_setup.outputs.is_safe == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          fetch-depth: 0

      - name: Checkout flutter-chart
        uses: actions/checkout@v4
        with:
          repository: 'deriv-com/flutter-chart'
          path: flutter-chart
          ref: ${{ env.FLUTTER_CHART_REF }}
          token: ${{ github.token }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            chart_app/.dart_tool
          key: flutter-deps-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            flutter-deps-${{ env.FLUTTER_VERSION }}-
            flutter-deps-

      - name: Cache Flutter build
        uses: actions/cache@v3
        with:
          path: chart_app/build
          key: flutter-build-${{ hashFiles('chart_app/**/*.dart', 'chart_app/pubspec.yaml') }}
          restore-keys: flutter-build-

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/github_action_key
          chmod 600 ~/.ssh/github_action_key
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Build Flutter application with retry
        uses: nick-fields/retry@v3
        env:
          GIT_SSH_COMMAND: 'ssh -i ~/.ssh/github_action_key -o StrictHostKeyChecking=no'
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: |
            set -e
            cd chart_app

            echo "::group::Installing Flutter dependencies"
            flutter pub get
            echo "::endgroup::"

            echo "::group::Building Flutter web application"
            flutter build web --web-renderer ${{ env.FLUTTER_WEB_RENDERER }} --release --verbose
            echo "::endgroup::"

            # Verify build output exists
            if [ ! -d "build/web" ]; then
              echo "::error::Flutter build failed - no build/web directory found"
              exit 1
            fi

      - name: Report Flutter build size
        run: |
          FLUTTER_SIZE=$(du -sh chart_app/build/web | cut -f1)
          echo "::notice::Flutter build size: $FLUTTER_SIZE"
          echo "FLUTTER_BUILD_SIZE=$FLUTTER_SIZE" >> $GITHUB_ENV

      - name: Upload Flutter build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: flutter-build
          path: chart_app/build/web
          retention-days: 1

      - name: Cleanup SSH key
        if: always()
        run: |
          # Secure cleanup of SSH key and known_hosts
          if [ -f ~/.ssh/github_action_key ]; then
            shred -vfz -n 3 ~/.ssh/github_action_key 2>/dev/null || rm -f ~/.ssh/github_action_key
            echo "::notice::SSH key securely removed"
          fi

          # Remove the added known_hosts entry for github.com
          if [ -f ~/.ssh/known_hosts ]; then
            sed -i '/^github\.com/d' ~/.ssh/known_hosts 2>/dev/null || true
            echo "::notice::GitHub known_hosts entry removed"
          fi

  # ---------------------------------------------------------------------------
  # Node.js Build Job
  # ---------------------------------------------------------------------------
  # Purpose: Builds SmartCharts Champion application in parallel with Flutter
  # Performance: Uses npm caching and build artifact caching
  # Output: Stores Node.js build artifacts for integration step
  # ---------------------------------------------------------------------------
  build_nodejs:
    needs: security_and_setup
    if: needs.security_and_setup.outputs.is_safe == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: node-modules-

      - name: Install dependencies with retry
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: npm ci

      - name: Build SmartCharts Champion with retry
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 15
          max_attempts: 3
          command: |
            set -e
            echo "::group::Building SmartCharts Champion"
            npm run build
            echo "::endgroup::"

            # Verify build output exists
            if [ ! -d "dist" ]; then
              echo "::error::SmartCharts Champion build failed - no dist directory found"
              exit 1
            fi

      - name: Report Node.js build size
        run: |
          NODEJS_SIZE=$(du -sh dist | cut -f1)
          echo "::notice::Node.js build size: $NODEJS_SIZE"
          echo "NODEJS_BUILD_SIZE=$NODEJS_SIZE" >> $GITHUB_ENV

      - name: Upload Node.js build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: nodejs-build
          path: dist
          retention-days: 1

  # ---------------------------------------------------------------------------
  # Integration and Deployment Job
  # ---------------------------------------------------------------------------
  # Purpose: Combines builds and deploys to GitHub Pages with verification
  # Dependencies: Requires both Flutter and Node.js builds to complete
  # Features: Deployment verification, failure reporting, and cleanup
  # ---------------------------------------------------------------------------
  deploy:
    needs: [security_and_setup, build_flutter, build_nodejs]
    if: needs.security_and_setup.outputs.is_safe == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: write
      pull-requests: write
      pages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          fetch-depth: 0

      - name: Setup Node.js for deployment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install deployment dependencies
        run: npm ci

      - name: Download Flutter build artifacts
        uses: actions/download-artifact@v3
        with:
          name: flutter-build
          path: flutter-build

      - name: Download Node.js build artifacts
        uses: actions/download-artifact@v3
        with:
          name: nodejs-build
          path: dist

      - name: Verify build artifacts
        run: |
          set -e
          echo "::group::Verifying build artifacts integrity"

          # Verify Flutter build artifacts
          if [ ! -d "flutter-build" ]; then
            echo "::error::Flutter build artifacts directory not found"
            exit 1
          fi

          if [ ! -f "flutter-build/index.html" ]; then
            echo "::error::Flutter build missing index.html"
            exit 1
          fi

          # Verify Node.js build artifacts
          if [ ! -d "dist" ]; then
            echo "::error::Node.js build artifacts directory not found"
            exit 1
          fi

          # Check for essential files in dist
          ESSENTIAL_FILES=("index.html")
          for file in "${ESSENTIAL_FILES[@]}"; do
            if [ ! -f "dist/$file" ]; then
              echo "::error::Essential file missing from Node.js build: $file"
              exit 1
            fi
          done

          # Verify artifacts are not empty
          FLUTTER_FILE_COUNT=$(find flutter-build -type f | wc -l)
          NODEJS_FILE_COUNT=$(find dist -type f | wc -l)

          if [ "$FLUTTER_FILE_COUNT" -eq 0 ]; then
            echo "::error::Flutter build artifacts directory is empty"
            exit 1
          fi

          if [ "$NODEJS_FILE_COUNT" -eq 0 ]; then
            echo "::error::Node.js build artifacts directory is empty"
            exit 1
          fi

          echo "::notice::✅ Build artifacts verification passed"
          echo "::notice::  - Flutter files: $FLUTTER_FILE_COUNT"
          echo "::notice::  - Node.js files: $NODEJS_FILE_COUNT"
          echo "::endgroup::"

      - name: Integrate Flutter build
        run: |
          set -e
          echo "::group::Integrating Flutter build with main application"

          # Create Flutter subdirectory in main dist folder
          mkdir -p dist/flutter

          # Copy all Flutter web build artifacts
          cp -r flutter-build/* dist/flutter/

          # Verify integration was successful
          if [ ! -f "dist/flutter/index.html" ]; then
            echo "::error::Failed to integrate Flutter build artifacts"
            exit 1
          fi

          echo "::notice::Successfully integrated Flutter build"
          echo "::endgroup::"

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Report final build statistics
        run: |
          TOTAL_SIZE=$(du -sh dist | cut -f1)
          echo "::notice::Final deployment size: $TOTAL_SIZE"

          # Count files for additional stats
          FILE_COUNT=$(find dist -type f | wc -l)
          echo "::notice::Total files in deployment: $FILE_COUNT"

      - name: Deploy to GitHub Pages with retry
        uses: nick-fields/retry@v3
        env:
          GH_TOKEN: ${{ github.token }}
          BRANCH_NAME: ${{ needs.security_and_setup.outputs.branch_name }}
          IS_PREVIEW: ${{ needs.security_and_setup.outputs.is_preview }}
          DEPLOY_URL: ${{ needs.security_and_setup.outputs.deploy_url }}
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: |
            set -e
            echo "::group::Deploying to GitHub Pages"
            echo "::notice::Deploying to branch: $BRANCH_NAME"

            if [ "$IS_PREVIEW" == "true" ]; then
              echo "::notice::Running preview deployment to folder: $BRANCH_NAME"
              npm run gh-pages:folder -- "$BRANCH_NAME"
            else
              echo "::notice::Running main deployment"
              npm run gh-pages
            fi

            echo "::notice::Deployment completed successfully"
            echo "::notice::Site will be available at: $DEPLOY_URL"
            echo "::endgroup::"

      - name: Wait for deployment propagation
        if: needs.security_and_setup.outputs.is_preview == 'true'
        run: |
          echo "::notice::Waiting for GitHub Pages deployment to propagate..."
          sleep ${{ env.DEPLOYMENT_WAIT_TIME }}

      - name: Verify deployment
        run: |
          DEPLOY_URL="${{ needs.security_and_setup.outputs.deploy_url }}"
          MAX_ATTEMPTS=${{ env.DEPLOYMENT_VERIFICATION_ATTEMPTS }}
          ATTEMPT=1

          echo "::group::Verifying deployment at $DEPLOY_URL"

          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "::notice::Verification attempt $ATTEMPT of $MAX_ATTEMPTS"

            if curl -s -f --max-time 30 "$DEPLOY_URL" > /dev/null; then
              echo "::notice::✅ Deployment verified successfully!"
              echo "DEPLOYMENT_VERIFIED=true" >> $GITHUB_ENV
              break
            fi

            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "::warning::⚠️  Deployment verification failed after $MAX_ATTEMPTS attempts"
              echo "::warning::The site may still be propagating. Please check manually: $DEPLOY_URL"
              echo "DEPLOYMENT_VERIFIED=false" >> $GITHUB_ENV
              break
            fi

            echo "::notice::Attempt $ATTEMPT failed, retrying in 10 seconds..."
            sleep 10
            ATTEMPT=$((ATTEMPT + 1))
          done

          echo "::endgroup::"

      - name: Generate success notification
        if: github.event_name == 'pull_request' && success()
        uses: 'deriv-com/shared-actions/.github/actions/post_preview_link_comment@v1'
        with:
          issue_number: ${{ github.event.number }}
          check_run_id: ${{ needs.security_and_setup.outputs.check_run_id }}
          preview_url: ${{ needs.security_and_setup.outputs.deploy_url }}
          status: ${{ job.status }}

      - name: Post build statistics comment
        if: github.event_name == 'pull_request' && success()
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          github-token: ${{ github.token }}
          script: |
            const totalSize = process.env.TOTAL_SIZE || 'Unknown';
            const deployUrl = '${{ needs.security_and_setup.outputs.deploy_url }}';
            const verified = process.env.DEPLOYMENT_VERIFIED === 'true' ? '✅ Verified' : '⚠️ Pending verification';

            const body = `## 📊 Build Statistics

            **🚀 Deployment Status:** ${verified}
            **📦 Total Size:** ${totalSize}
            **🔗 Preview URL:** ${deployUrl}

            The preview site has been deployed and should be accessible within a few minutes.`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: body
            });

      - name: Cleanup build artifacts
        if: always()
        run: |
          # Clean up large temporary files and caches
          rm -rf node_modules/.cache
          rm -rf dist
          rm -rf flutter-build

      - name: Report deployment failure
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          github-token: ${{ github.token }}
          script: |
            const workflowUrl = `${context.payload.repository.html_url}/actions/runs/${context.runId}`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `## ❌ Preview deployment failed

              The preview deployment for this PR failed during the build or deployment process.

              **🔍 Troubleshooting:**
              - Check the [workflow run](${workflowUrl}) for detailed error logs
              - Verify that all dependencies are properly configured
              - Ensure Flutter and Node.js builds complete successfully
              - Check for any configuration issues in build scripts

              **🔄 Next Steps:**
              1. Review the error logs in the workflow run
              2. Fix any identified issues
              3. Push new changes to automatically retry the deployment

              The workflow includes automatic retry mechanisms, so temporary failures should resolve automatically.`
            });

  # ---------------------------------------------------------------------------
  # Cleanup Job
  # ---------------------------------------------------------------------------
  # Purpose: Cleanup artifacts and perform maintenance tasks
  # Timing: Always runs regardless of workflow success/failure
  # Scope: Removes temporary artifacts and performs housekeeping
  # ---------------------------------------------------------------------------
  cleanup:
    needs: [security_and_setup, build_flutter, build_nodejs, deploy]
    if: always() && needs.security_and_setup.outputs.is_safe == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup artifacts
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          github-token: ${{ github.token }}
          script: |
            // Clean up build artifacts older than 1 day
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });

            console.log(`Found ${artifacts.data.artifacts.length} artifacts for cleanup`);

            for (const artifact of artifacts.data.artifacts) {
              try {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
                console.log(`Cleaned up artifact: ${artifact.name}`);
              } catch (error) {
                console.log(`Failed to cleanup artifact ${artifact.name}: ${error.message}`);
              }
            }

      - name: Workflow summary
        run: |
          echo "## 🎯 Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Check:** ✅ Passed" >> $GITHUB_STEP_SUMMARY
          echo "- **Flutter Build:** ${{ needs.build_flutter.result == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Node.js Build:** ${{ needs.build_nodejs.result == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment:** ${{ needs.deploy.result == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Preview URL:** ${{ needs.security_and_setup.outputs.deploy_url }}" >> $GITHUB_STEP_SUMMARY
